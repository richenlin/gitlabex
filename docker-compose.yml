# docker-compose.yml - 移除过时的version配置

services:
  # GitLab CE服务
  gitlab:
    image: gitlab/gitlab-ce:17.10.1-ce.0
    container_name: gitlabex-gitlab
    restart: unless-stopped
    hostname: 'gitlab'
    ports:
      - "8081:80"
      - "2222:22"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
      - ./config:/config:ro
      - gitlab_oauth_config:/shared
    environment:
      GITLAB_ROOT_PASSWORD: b75hZ0qcwLKD
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://localhost:8081'
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
        gitlab_rails['initial_root_password'] = ENV['GITLAB_ROOT_PASSWORD']
        gitlab_rails['gitlab_signup_enabled'] = true
        nginx['listen_port'] = 80
        nginx['redirect_http_to_https'] = false
        # 强制设置正确的external URL用于重定向
        gitlab_rails['gitlab_host'] = 'localhost'
        gitlab_rails['gitlab_port'] = 8081
        gitlab_rails['gitlab_https'] = false
        
        # 禁用内置PostgreSQL
        postgresql['enable'] = false
        gitlab_rails['db_adapter'] = 'postgresql'
        gitlab_rails['db_encoding'] = 'utf8'
        gitlab_rails['db_host'] = 'postgres'
        gitlab_rails['db_port'] = 5432
        gitlab_rails['db_username'] = 'gitlab'
        gitlab_rails['db_password'] = 'password123'
        gitlab_rails['db_database'] = 'gitlab'
        
        # 禁用内置Redis
        redis['enable'] = false
        gitlab_rails['redis_host'] = 'redis'
        gitlab_rails['redis_port'] = 6379
        gitlab_rails['redis_password'] = 'password123'
    networks:
      - gitlabex-network
    healthcheck:
      test: ["CMD", "/opt/gitlab/bin/gitlab-ctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 300s

  # GitLab OAuth应用自动初始化服务 - Rails版本
  gitlab-init:
    image: alpine:3.19
    container_name: gitlabex-gitlab-init
    restart: "no"  # 只运行一次
    user: root  # 使用root用户运行以确保有写入权限
    depends_on:
      gitlab:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts:ro
      - ./config:/config:ro
      - gitlab_oauth_config:/shared
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - GITLAB_ROOT_PASSWORD=${GITLAB_ROOT_PASSWORD:-b75hZ0qcwLKD}
      - GITLAB_CONTAINER=gitlabex-gitlab
      - OAUTH_CONFIG_FILE=/config/oauth.env
      - SHARED_DIR=/shared
    networks:
      - gitlabex-network
    command: >
      sh -c "apk add --no-cache bash curl docker-cli &&
             /scripts/init-oauth-rails.sh"

  # PostgreSQL数据库
  postgres:
    image: postgres:15
    container_name: gitlabex-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: gitlab
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: gitlab
      # 为GitLabEx创建额外的数据库
      POSTGRES_MULTIPLE_DATABASES: gitlabex
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
    expose:
      - "5432"
    networks:
      - gitlabex-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gitlab"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: gitlabex-redis
    restart: unless-stopped
    command: redis-server --requirepass password123
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    networks:
      - gitlabex-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "password123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # OnlyOffice Document Server
  onlyoffice:
    image: onlyoffice/documentserver:latest
    container_name: gitlabex-onlyoffice
    restart: unless-stopped
    stdin_open: true
    tty: true
    expose:
      - "80"
      - "443"
    volumes:
      - onlyoffice_data:/var/www/onlyoffice/Data
      - onlyoffice_logs:/var/log/onlyoffice
      - onlyoffice_cache:/var/lib/onlyoffice/documentserver/App_Data/cache/files
      - onlyoffice_forgotten:/var/lib/onlyoffice/documentserver/App_Data/cache/forgotten
    environment:
      - JWT_ENABLED=true
      - JWT_SECRET=gitlabex-jwt-secret-2024
      - JWT_HEADER=Authorization
      - JWT_IN_BODY=true
      - WOPI_ENABLED=false
      - USE_UNAUTHORIZED_STORAGE=false
    networks:
      - gitlabex-network

  # 后端服务 - 支持动态OAuth配置加载
  backend:
    build: ./backend
    container_name: gitlabex-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      gitlab:
        condition: service_healthy
      onlyoffice:
        condition: service_started
    environment:
      # 数据库配置
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=gitlabex
      - DB_PASSWORD=password123
      - DB_NAME=gitlabex
      - DB_SSLMODE=disable
      # Redis配置
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=password123
      # GitLab配置 (从OAuth配置文件中动态加载)
      - GITLAB_OAUTH_CONFIG_PATH=/shared/gitlab-oauth.env
      # OnlyOffice配置
      - ONLYOFFICE_URL=http://onlyoffice
      - ONLYOFFICE_JWT_SECRET=gitlabex-jwt-secret-2024
      - ONLYOFFICE_CALLBACK_URL=http://localhost:8080/api/documents/callback
      # JWT配置
      - JWT_SECRET=gitlabex-app-jwt-secret-2024
      # 服务器配置
      - SERVER_PORT=8080
      - GIN_MODE=release
    volumes:
      - gitlab_oauth_config:/shared:ro
    networks:
      - gitlabex-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gitlabex-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8080/api
      - VITE_GITLAB_URL=http://localhost:8081
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_started
    networks:
      - gitlabex-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  gitlab_config:
  gitlab_logs:
  gitlab_data:
  postgres_data:
  redis_data:
  onlyoffice_data:
  onlyoffice_logs:
  onlyoffice_cache:
  onlyoffice_forgotten:
  gitlab_oauth_config:

networks:
  gitlabex-network:
    driver: bridge